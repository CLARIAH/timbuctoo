<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <artifactId>timbuctoo</artifactId>
    <groupId>nl.knaw.huygens</groupId>
    <version>3.1.0-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>timbuctoo-instancev4</artifactId>

  <properties>

    <!-- don't generate javadoc -->
    <maven.javadoc.skip>true</maven.javadoc.skip>


    <!-- code dependencies -->
    <activemq.version>5.13.0</activemq.version>
    <concoridion.version>1.5.1</concoridion.version>
    <dropwizard.version>0.9.1</dropwizard.version>
    <dropwizard-activemq.version>0.3.13</dropwizard-activemq.version>
    <httpcore.version>4.4.4</httpcore.version>
    <jsonassert.version>1.2.3</jsonassert.version>
    <tinkerpop3.version>3.1.0-incubating</tinkerpop3.version>
    <!-- test output -->
    <concordion.output.dir>${basedir}/target/concordion</concordion.output.dir>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!-- plugins -->
    <appassembler.version>1.10</appassembler.version>
    <build-helper-maven-plugin.version>1.10</build-helper-maven-plugin.version>
    <exec-maven-plugin.version>1.4.0</exec-maven-plugin.version>
    <javaslang.version>2.0.0-RC4</javaslang.version>
    <maven-checkstyle-plugin.version>2.17</maven-checkstyle-plugin.version>
    <maven-failsafe-plugin.version>2.18.1</maven-failsafe-plugin.version>
    <metrics.version>3.1.2</metrics.version>
    <rpm-maven-plugin.version>2.1.5</rpm-maven-plugin.version>
    <rpm.app-home>/opt/timbuctoo</rpm.app-home>
  </properties>

  <dependencies>
    <!-- ## Main dependencies ## -->
    <!-- Dropwizard -->
    <dependency>
      <groupId>io.dropwizard</groupId>
      <artifactId>dropwizard-core</artifactId>
      <version>${dropwizard.version}</version>
    </dependency>

    <!-- TinkerPop library for support graph databases -->
    <dependency>
      <groupId>org.apache.tinkerpop</groupId>
      <artifactId>gremlin-core</artifactId>
      <version>${tinkerpop3.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-log4j12</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.tinkerpop</groupId>
      <artifactId>neo4j-gremlin</artifactId>
      <version>${tinkerpop3.version}</version>
    </dependency>

    <dependency>
      <groupId>org.neo4j</groupId>
      <artifactId>neo4j-tinkerpop-api-impl</artifactId>
      <version>0.3-2.3.0</version>
    </dependency>

    <!-- activeMQ for eventually executing commands on remote services -->
    <dependency>
      <groupId>com.kjetland.dropwizard</groupId>
      <artifactId>dropwizard-activemq</artifactId>
      <version>${dropwizard-activemq.version}</version>
    </dependency>
    <!-- Activemq broker package contains the in memory version for easy quick run -->
    <dependency>
      <groupId>org.apache.activemq</groupId>
      <artifactId>activemq-broker</artifactId>
      <version>${activemq.version}</version>
      <scope>runtime</scope>
    </dependency>
    <!-- Activemq persistence db to make the in-memory broker somewhat production viable-->
    <dependency>
      <groupId>org.apache.activemq</groupId>
      <artifactId>activemq-kahadb-store</artifactId>
      <version>${activemq.version}</version>
      <scope>runtime</scope>
    </dependency>
    <!-- SDK to create Handle persistent ids-->
    <dependency>
      <groupId>nl.knaw.huygens</groupId>
      <artifactId>huygens-persistence</artifactId>
      <version>${huygens.persistence.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-log4j12</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Apache Commons -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.4</version>
    </dependency>

    <!--Try monad-->
    <dependency>
      <groupId>com.javaslang</groupId>
      <artifactId>javaslang</artifactId>
      <version>${javaslang.version}</version>
    </dependency>
    <!--GELF logback handler for sending logs to a remote log server-->
    <dependency>
      <groupId>net.gini.dropwizard</groupId>
      <artifactId>dropwizard-gelf</artifactId>
      <version>0.9.2-1</version>
    </dependency>
    <!--log metrics to graphite-->
    <dependency>
      <groupId>io.dropwizard.metrics</groupId>
      <artifactId>metrics-core</artifactId>
      <version>${metrics.version}</version>
    </dependency>
    <dependency>
      <groupId>io.dropwizard.metrics</groupId>
      <artifactId>metrics-graphite</artifactId>
      <version>${metrics.version}</version>
    </dependency>
    <dependency>
      <groupId>io.dropwizard</groupId>
      <artifactId>dropwizard-metrics-graphite</artifactId>
      <version>${dropwizard.version}</version>
    </dependency>
    <!-- ## End of main dependencies ## -->

    <!-- ## Test dependencies ## -->
    <!-- Concordion acceptance test framework -->
    <dependency>
      <groupId>org.concordion</groupId>
      <artifactId>concordion</artifactId>
      <version>${concoridion.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Dropwizard test dependencies -->
    <dependency>
      <groupId>io.dropwizard</groupId>
      <artifactId>dropwizard-testing</artifactId>
      <version>${dropwizard.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Http core for parsing the acceptance test inputs -->
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <version>${httpcore.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- JSON assert a library to help verifying JSON -->
    <dependency>
      <groupId>org.skyscreamer</groupId>
      <artifactId>jsonassert</artifactId>
      <version>${jsonassert.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- JUnit -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.neo4j</groupId>
      <artifactId>neo4j-kernel</artifactId>
      <version>2.3.1</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.neo4j</groupId>
      <artifactId>neo4j-io</artifactId>
      <version>2.3.1</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <!-- Timbuctoo test services for easy creation of class matchers -->
    <dependency>
      <groupId>nl.knaw.huygens</groupId>
      <artifactId>timbuctoo-test-services</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <!--hamcrest matcher for asserting json -->
    <dependency>
      <groupId>uk.co.datumedge</groupId>
      <artifactId>hamcrest-json</artifactId>
      <version>0.2</version>
    </dependency>
    <!-- ## End of test dependencies ## -->
  </dependencies>
  <repositories>
    <repository>
      <id>mbknor</id>
      <name>mbknor</name>
      <url>https://raw.githubusercontent.com/mbknor/mbknor.github.com/master/m2repo/releases</url>
    </repository>
  </repositories>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.0.0</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>docker/appassembler</directory>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.19.1</version>
        <configuration>
          <systemPropertyVariables>
            <logback.configurationFile>${basedir}/src/test/resources/disable-logging.xml</logback.configurationFile>
          </systemPropertyVariables>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>${build-helper-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>add-test-source</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${basedir}/src/spec/java</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-test-resource</id>
            <phase>generate-test-resources</phase>
            <goals>
              <goal>add-test-resource</goal>
            </goals>
            <configuration>
              <resources>
                <resource>
                  <directory>
                    ${basedir}/src/spec/resources
                  </directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>appassembler-maven-plugin</artifactId>
        <version>${appassembler.version}</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>assemble</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <programs>
            <program>
              <id>timbuctoo</id>
              <mainClass>nl.knaw.huygens.timbuctoo.server.TimbuctooV4</mainClass>
            </program>
          </programs>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven-failsafe-plugin.version}</version>
        <configuration>
          <forkMode>pertest</forkMode>
          <argLine>-Xms1024m -Xmx1024m</argLine>
          <testFailureIgnore>false</testFailureIgnore>
          <skip>false</skip>
          <testSourceDirectory>${project.build.testOutputDirectory}</testSourceDirectory>
          <includes>
            <include>**/*Fixture.java</include>
          </includes>
          <systemPropertyVariables>
            <concordion.output.dir>${concordion.output.dir}</concordion.output.dir>
          </systemPropertyVariables>
        </configuration>
        <executions>
          <execution>
            <id>run-integration-tests</id>
            <phase>integration-test</phase>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <phase>verify</phase>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>${maven-checkstyle-plugin.version}</version>
        <executions>
          <execution>
            <id>validate</id>
            <phase>validate</phase>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <configLocation>src/main/resources/checkstyle_config.xml</configLocation>
              <includeTestSourceDirectory>true</includeTestSourceDirectory>
              <encoding>UTF-8</encoding>
              <consoleOutput>true</consoleOutput>
              <failsOnError>true</failsOnError>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>build-docs</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>${basedir}/src/spec/scripts/builddoc</executable>
              <commandlineArgs>
                ${basedir}/src/spec/resources/ ${basedir}/target/concordion/
              </commandlineArgs>
            </configuration>
          </execution>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>cp</executable>
              <arguments>
                <argument>-R</argument>
                <argument>./target/appassembler</argument>
                <argument>./docker/appassembler</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <tasks>
                <echo>
                  ======================================================================================================
                  Done! now run

                  ./target/appassembler/bin/timbuctoo server example_config.yaml

                  to get a debug server up and running then go to http://localhost:8080
                  ======================================================================================================
                </echo>
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>buildRpm</id>
      <activation>
        <property>
          <name>buildRpm</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <!-- Create rpm during package phase for server releases, only works for systems of the Red Hat family -->
            <!-- The plugin depends on the 'rpm-build' package. -->
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>rpm-maven-plugin</artifactId>
            <version>${rpm-maven-plugin.version}</version>
            <executions>
              <execution>
                <id>generate-rpm</id>
                <goals>
                  <goal>rpm</goal>
                </goals>
                <configuration>
                  <group>Repository</group>
                  <description>Timbuctoo standalone app RPM package.</description>
                  <mappings>
                    <mapping>
                      <directory>${rpm.app-home}/repo</directory>
                      <filemode>774</filemode>
                      <username>datarepository</username>
                      <groupname>datarepsitory</groupname>
                      <sources>
                        <source>
                          <location>${project.build.directory}/appassembler/repo</location>
                        </source>
                      </sources>
                    </mapping>
                    <mapping>
                      <directory>${rpm.app-home}/bin</directory>
                      <filemode>664</filemode>
                      <username>datarepository</username>
                      <groupname>datarepsitory</groupname>
                      <sources>
                        <source>
                          <location>${project.build.directory}/appassembler/bin</location>
                        </source>
                      </sources>
                    </mapping>
                    <mapping>
                      <directory>${rpm.app-home}/conf</directory>
                      <filemode>664</filemode>
                      <username>datarepository</username>
                      <groupname>datarepsitory</groupname>
                      <configuration>true</configuration>
                      <sources>
                        <source>
                          <location>${project.basedir}/example_config.yaml</location>
                        </source>
                      </sources>
                    </mapping>
                    <mapping>
                      <directory>${rpm.app-home}/logs</directory>
                    </mapping>
                  </mappings>
                  <preinstallScriptlet>
                    <scriptFile>${project.build.scriptSourceDirectory}/rpm_scripts/create_user.sh</scriptFile>
                  </preinstallScriptlet>
                  <postremoveScriptlet>
                    <scriptFile>${project.build.scriptSourceDirectory}/rpm_scripts/remove_user.sh</scriptFile>
                  </postremoveScriptlet>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
